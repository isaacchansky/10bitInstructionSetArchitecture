10-Bit Instruction Set Architecture
CS318

Robert Vail
Thomas Wagner
Adam Straus
Isaac Chansky
==================================

REGISTER FILE:

$t1
$t2
$t3
$t4
$t5
$t6
$beq1
$zero
$beq2
$one
$negone
$nine
$sixteen
$fourtyeight
$load
_____


ISA definition:

       10-bit instructions

[ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ]

 [3-bit opcode]  [7-bits to work with]


ADD [4][3]
SLL [4][3]
AND [1][3][3]
LOAD [1][6]  or [1][3][3]
STORE [1][6] or STORE [1][1][5]
BEQ [1][2][4]


8 Instructions:
   3-bit opcodes: ADD, LOAD, STORE, BEQ, SLL, AND, HALT, T-B-D.
Add -> 
  ADD [4 bit $register(1-16)] [3 bit reference to $register(1-8)]
       //3 bit register is one of 8 hardcoded 'add registers'

Load -> 
  LOAD [0 or 1 (0 = mem, 1 = stack)] [0 or 1 (IF MEM, 0 is front of halfword, 1 is middle of halfword][5 bits used for register (have an extra)]


Store -> 
  STORE [1 bit condition <memory[10] or stack>] [6 bits for offset] #mem
        OR
  STORE [1 bit condition <memory[10] or stack>] [1 bit to store $t4 or $beq1] [5 bits] # 5 bits for hardcoded offset (program conter)

Branch if equal -> 
  BEQ [1 bit condition <compare <$zero or $beq1>] [ 2 bits <compare $zero $beq2 $one>][4 bits to specify where we are jumping]
      *** special case: if second parameter is 11, use last 4 bits for register

Shift left -> 
  SLL [4 bit shift amount] [3 bit $register to shift]

And -> 
  AND [1 bit flag <'set register' or 'real and'>][3 bit $register pos (1-8)] [3 bit register pos (1-8)]

Halt -> 
  HALT []
       //guess we just have no parameters, it just halts...